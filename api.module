<?php
// $Id: api.module,v 1.6 2004/09/02 13:23:51 JonBob Exp $

/**
 * @file
 * Generates and displays API documentation pages.
 *
 * This is an implementation of a subset of the Doxygen documentation generator
 * specification, tuned to produce output that best benefits the Drupal code base.
 * It is designed to assume the code it documents follows Drupal coding conventions,
 * and supports the following Doxygen constructs:
 *   @ mainpage
 *   @ file
 *   @ defgroup
 *   @ ingroup
 *   @ addtogroup (as a synonym of @ ingroup)
 *   @ param
 *   @ return
 *   @ link
 */

/**
 * Implementation of hook_help().
 */
function api_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Generates and displays API documentation pages.');
  }
}

/**
 * Implementation of hook_menu().
 */
function api_menu() {
  $items = array();
  $access = user_access('access content');

  $items[] = array('path' => 'api', 'title' => t('API reference'),
    'access' => user_access('access content'),
    'callback' => 'api_page_main');
  if (arg(0) == 'api') {
    $result = db_query('SELECT branch_name, title FROM {api_branch}');
    while ($branch = db_fetch_object($result)) {
      $items[] = array('path' => 'api/'. $branch->branch_name, 'title' => $branch->title,
        'callback' => 'api_page_branch', 'access' => $access,
        'callback arguments' => array($branch->branch_name));

      $items[] = array('path' => 'api/'. $branch->branch_name .'/function', 'title' => t('functions'),
        'callback' => 'api_page_function_list', 'access' => $access,
        'callback arguments' => array($branch->branch_name));
      if (is_string(arg(3))) {
        $items[] = array('path' => 'api/'. $branch->branch_name .'/function/'. arg(3), 'title' => t('function'),
          'callback' => 'api_page_function', 'access' => $access,
          'callback arguments' => array($branch->branch_name, arg(3)),
          'type' => MENU_CALLBACK);
        $items[] = array('path' => 'api/'. $branch->branch_name .'/function/'. arg(3) .'/documentation', 'title' => t('view documentation'),
          'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
        $items[] = array('path' => 'api/'. $branch->branch_name .'/function/'. arg(3) .'/references', 'title' => t('list references'),
          'callback' => 'api_page_function_references', 'access' => $access,
          'callback arguments' => array($branch->branch_name, arg(3)),
          'type' => MENU_LOCAL_TASK);
      }

      $items[] = array('path' => 'api/'. $branch->branch_name .'/file', 'title' => t('files'),
        'callback' => 'api_page_file_list', 'access' => $access,
        'callback arguments' => array($branch->branch_name));
      if (is_string(arg(3))) {
        $items[] = array('path' => 'api/'. $branch->branch_name .'/file/'. arg(3), 'title' => t('file'),
          'callback' => 'api_page_file', 'access' => $access,
          'callback arguments' => array($branch->branch_name, arg(3)),
          'type' => MENU_CALLBACK);
        $items[] = array('path' => 'api/'. $branch->branch_name .'/file/'. arg(3) .'/documentation', 'title' => t('view documentation'),
          'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
        $items[] = array('path' => 'api/'. $branch->branch_name .'/file/'. arg(3) .'/source', 'title' => t('view source'),
          'callback' => 'api_page_file_source', 'access' => $access,
          'callback arguments' => array($branch->branch_name, arg(3)),
          'type' => MENU_LOCAL_TASK);
      }

      $items[] = array('path' => 'api/'. $branch->branch_name .'/group', 'title' => t('topics'),
        'callback' => 'api_page_group_list', 'access' => $access,
        'callback arguments' => array($branch->branch_name));
      if (is_string(arg(3))) {
        $items[] = array('path' => 'api/'. $branch->branch_name .'/group/'. arg(3), 'title' => t('topic'),
          'callback' => 'api_page_group', 'access' => $access,
          'callback arguments' => array($branch->branch_name, arg(3)),
          'type' => MENU_CALLBACK);
      }
    }
  }

  $items[] = array('path' => 'admin/api', 'title' => t('API reference'),
    'access' => user_access('administer API reference'),
    'callback' => 'api_page_admin');

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function api_perm() {
  return array('administer API reference');
}

/**
 * Menu callback; displays a branch listing.
 */
function api_page_main() {
  print theme('page', '');
}

/**
 * Menu callback; displays the main documentation page.
 */
function api_page_branch($branch_name) {
  $result = db_query("SELECT documentation FROM {api_documentation} WHERE object_name = '%s' AND branch_name = '%s' AND object_type = 'mainpage'", $branch_name, $branch_name);
  if ($branch = db_fetch_object($result)) {
    print theme('page', api_link_documentation($branch->documentation, $branch_name));
  }
  else {
    drupal_not_found();
  }
}

/**
 * Menu callback; displays a function listing.
 */
function api_page_function_list($branch_name) {
  $headers = array(array('data' => t('Name'), 'field' => 'title'), array('data' => t('Location'), 'field' => 'file_name'), t('Description'));
  $rows = array();

  $result = pager_query("SELECT object_name, title, summary, file_name FROM {api_documentation} WHERE branch_name = '%s' AND object_type = 'function'". tablesort_sql($headers), 50, 0, NULL, $branch_name);
  while ($function = db_fetch_object($result)) {
    $rows[] = array(
      l($function->title, 'api/'. $branch_name .'/function/'. $function->object_name),
      l($function->file_name, 'api/'. $branch_name .'/file/'. $function->file_name),
      api_link_documentation($function->summary, $branch_name));
  }
  $output = theme('table', $headers, $rows);
  $output .= theme('pager', NULL, 50, 0, tablesort_pager());
  print theme('page', $output);
}

/**
 * Menu callback; displays documentation for a function.
 */
function api_page_function($branch_name, $object_name) {
  drupal_set_html_head('<style type="text/css">@import url(modules/api/api.css);</style>');

  $result = db_query("SELECT d.did, d.title, d.file_name, d.documentation, d.code, f.signature, f.start_line, f.parameters, f.return FROM {api_documentation} d INNER JOIN {api_function} f ON d.did = f.did WHERE d.object_name = '%s' AND d.branch_name = '%s' AND d.object_type = 'function'", $object_name, $branch_name);
  if ($function = db_fetch_object($result)) {
    $output = '';

    $output .= '<h3>'. t('Definition') .'</h3>';
    $output .= '<p><small>'. $function->signature .'</small><br />';
    $output .= l($function->file_name, 'api/'. $branch_name .'/file/'. $function->file_name) .', '. t('line') .' '. $function->start_line .'</p>';

    if (!empty($function->documentation)) {
      $output .= '<h3>'. t('Description') .'</h3>';
      $output .= api_link_documentation($function->documentation, $branch_name);
    }

    if (!empty($function->parameters)) {
      $output .= '<h3>'. t('Parameters') .'</h3>';
      $output .= api_link_documentation($function->parameters, $branch_name);
    }

    if (!empty($function->return)) {
      $output .= '<h3>'. t('Return value') .'</h3>';
      $output .= api_link_documentation($function->return, $branch_name);
    }

    $headers = array(array('data' => t('Name'), 'field' => 'd.title'), t('Description'));
    $rows = array();
    $result = db_query("SELECT d.object_name, d.title, d.summary FROM {api_reference} r INNER JOIN {api_documentation} d ON r.to_did = d.did AND d.object_type = 'group' WHERE r.from_did = %d". tablesort_sql($headers), $function->did);
    while ($group = db_fetch_object($result)) {
      $rows[] = array(
        l($group->title, 'api/'. $branch_name .'/group/'. $group->object_name),
        api_link_documentation($group->summary, $branch_name));
    }
    if (count($rows) > 0) {
      $output .= '<h3>'. t('Related topics') .'</h3>';
      $output .= theme('table', $headers, $rows);
    }

    if (!empty($function->code)) {
      $output .= '<h3>'. t('Code') .'</h3>';
      $output .= api_link_code($function->code, $branch_name);
    }

    print theme('page', $output, $function->title);
  }
  else {
    drupal_not_found();
  }
}


/**
 * Menu callback; displays all functions that reference another function.
 */
function api_page_function_references($branch_name, $object_name) {
  drupal_set_html_head('<style type="text/css">@import url(modules/api/api.css);</style>');

  $result = db_query("SELECT d.did, d.title FROM {api_documentation} d WHERE d.object_name = '%s' AND d.branch_name = '%s' AND d.object_type = 'function'", $object_name, $branch_name);
  if ($function = db_fetch_object($result)) {
    $output = '';

    $headers = array(array('data' => t('Name'), 'field' => 'd.title'), t('Description'));
    $rows = array();
    $result = db_query("SELECT d.object_name, d.title, d.summary FROM {api_reference} r INNER JOIN {api_documentation} d ON r.to_did = d.did AND d.object_type = 'group' WHERE r.from_did = %d". tablesort_sql($headers), $function->did);
    while ($group = db_fetch_object($result)) {
      $rows[] = array(
        l($group->title, 'api/'. $branch_name .'/group/'. $group->object_name),
        api_link_documentation($group->summary, $branch_name));
    }
    if (count($rows) > 0) {
      $output .= '<h3>'. t('Related topics') .'</h3>';
      $output .= theme('table', $headers, $rows);
    }

    $headers = array(array('data' => t('Name'), 'field' => 'd.title'), array('data' => t('Location'), 'field' => 'd.file_name'), t('Description'));
    $rows = array();
    $result = db_query("SELECT d.object_name, d.title, d.summary, d.file_name FROM {api_reference} r INNER JOIN {api_documentation} d ON r.from_did = d.did AND d.object_type = 'function' WHERE r.to_did = %d". tablesort_sql($headers), $function->did);
    while ($reference = db_fetch_object($result)) {
      $rows[] = array(
        l($reference->title, 'api/'. $branch_name .'/function/'. $reference->object_name),
        l($reference->file_name, 'api/'. $branch_name .'/file/'. $reference->file_name),
        api_link_documentation($reference->summary, $branch_name));
    }
    if (count($rows) > 0) {
      $output .= '<h3>'. t('Functions that call %name()', array('%name' => $function->title)) .'</h3>';
      $output .= theme('table', $headers, $rows);
    }

    $headers = array(array('data' => t('Name'), 'field' => 'd.title'), array('data' => t('Location'), 'field' => 'd.file_name'), t('Description'));
    $rows = array();
    $result = db_query("SELECT d.object_name, d.title, d.summary, d.file_name FROM {api_reference} r INNER JOIN {api_documentation} d ON r.to_did = d.did AND d.object_type = 'function' WHERE r.from_did = %d". tablesort_sql($headers), $function->did);
    while ($reference = db_fetch_object($result)) {
      $rows[] = array(
        l($reference->title, 'api/'. $branch_name .'/function/'. $reference->object_name),
        l($reference->file_name, 'api/'. $branch_name .'/file/'. $reference->file_name),
        api_link_documentation($reference->summary, $branch_name));
    }
    if (count($rows) > 0) {
      $output .= '<h3>'. t('Functions called by %name()', array('%name' => $function->title)) .'</h3>';
      $output .= theme('table', $headers, $rows);
    }

    print theme('page', $output, $function->title);
  }
  else {
    drupal_not_found();
  }
}

/**
 * Menu callback; displays a file listing.
 */
function api_page_file_list($branch_name) {
  $headers = array(array('data' => t('Name'), 'field' => 'title'), t('Description'));
  $rows = array();

  $result = pager_query("SELECT object_name, title, summary FROM {api_documentation} WHERE branch_name = '%s' AND object_type = 'file'". tablesort_sql($headers), 50, 0, NULL, $branch_name);
  while ($file = db_fetch_object($result)) {
    $rows[] = array(
      l($file->title, 'api/'. $branch_name .'/file/'. $file->object_name),
      api_link_documentation($file->summary, $branch_name));
  }
  $output = theme('table', $headers, $rows);
  $output .= theme('pager', NULL, 50, 0, tablesort_pager());
  print theme('page', $output);
}

/**
 * Menu callback; displays documentation for a file.
 */
function api_page_file($branch_name, $object_name) {
  drupal_set_html_head('<style type="text/css">@import url(modules/api/api.css);</style>');

  $result = db_query("SELECT d.did, d.title, d.documentation, f.version FROM {api_documentation} d INNER JOIN {api_file} f ON d.did = f.did WHERE object_name = '%s' AND branch_name = '%s' AND object_type = 'file'", $object_name, $branch_name);
  if ($file = db_fetch_object($result)) {
    $output = '';

    if (!empty($file->version)) {
      $output .= '<h3>'. t('Version') .'</h3>';
      $output .= '<p>'. $file->version .'</p>';
    }

    if (!empty($file->documentation)) {
      $output .= '<h3>'. t('Description') .'</h3>';
      $output .= api_link_documentation($file->documentation, $branch_name);
    }

    $headers = array(array('data' => t('Name'), 'field' => 'title'), t('Description'));
    $rows = array();
    $result = db_query("SELECT title, object_name, summary FROM {api_documentation} WHERE file_name = '%s' AND branch_name = '%s' AND object_type = 'function'". tablesort_sql($headers), $object_name, $branch_name);
    while ($function = db_fetch_object($result)) {
      $rows[] = array(
        l($function->title, 'api/'. $branch_name .'/function/'. $function->object_name),
        api_link_documentation($function->summary, $branch_name));
    }
    if (count($rows) > 0) {
      $output .= '<h3>'. t('Functions') .'</h3>';
      $output .= theme('table', $headers, $rows);
    }

    print theme('page', $output, $file->title);
  }
  else {
    drupal_not_found();
  }
}

/**
 * Menu callback; displays source code for a file.
 */
function api_page_file_source($branch_name, $object_name) {
  drupal_set_html_head('<style type="text/css">@import url(modules/api/api.css);</style>');

  $result = db_query("SELECT title, code FROM {api_documentation} WHERE object_name = '%s' AND branch_name = '%s' AND object_type = 'file'", $object_name, $branch_name);
  if ($file = db_fetch_object($result)) {
    print theme('page', api_link_code($file->code, $branch_name), $file->title);
  }
  else {
    drupal_not_found();
  }
}

/**
 * Menu callback; displays a group listing.
 */
function api_page_group_list($branch_name) {
  $headers = array(array('data' => t('Name'), 'field' => 'title'), array('data' => t('Location'), 'field' => 'file_name'), t('Description'));
  $rows = array();

  $result = pager_query("SELECT object_name, title, summary, file_name FROM {api_documentation} WHERE branch_name = '%s' AND object_type = 'group'". tablesort_sql($headers), 50, 0, NULL, $branch_name);
  while ($group = db_fetch_object($result)) {
    $rows[] = array(
      l($group->title, 'api/'. $branch_name .'/group/'. $group->object_name),
      l($group->file_name, 'api/'. $branch_name .'/file/'. $group->file_name),
      api_link_documentation($group->summary, $branch_name));
  }
  $output = theme('table', $headers, $rows);
  $output .= theme('pager', NULL, 50, 0, tablesort_pager());
  print theme('page', $output);
}

/**
 * Menu callback; displays documentation for a group.
 */
function api_page_group($branch_name, $object_name) {
  drupal_set_html_head('<style type="text/css">@import url(modules/api/api.css);</style>');

  $result = db_query("SELECT did, title, documentation FROM {api_documentation} WHERE object_name = '%s' AND branch_name = '%s' AND object_type = 'group'", $object_name, $branch_name);
  if ($group = db_fetch_object($result)) {
    $output = '';

    if (!empty($group->documentation)) {
      $output .= api_link_documentation($group->documentation, $branch_name);
    }

    $headers = array(array('data' => t('Name'), 'field' => 'd.title'), array('data' => t('Location'), 'field' => 'd.file_name'), t('Description'));
    $rows = array();
    $result = db_query("SELECT d.object_name, d.title, d.summary, d.file_name FROM {api_reference} r INNER JOIN {api_documentation} d ON r.from_did = d.did AND d.object_type = 'function' WHERE r.to_did = %d". tablesort_sql($headers), $group->did);
    while ($function = db_fetch_object($result)) {
      $rows[] = array(
        l($function->title, 'api/'. $branch_name .'/function/'. $function->object_name),
        l($function->file_name, 'api/'. $branch_name .'/file/'. $function->file_name),
        api_link_documentation($function->summary, $branch_name));
    }
    if (count($rows) > 0) {
      $output .= '<h3>'. t('Functions') .'</h3>';
      $output .= theme('table', $headers, $rows);
    }

    print theme('page', $output, $group->title);
  }
  else {
    drupal_not_found();
  }
}

/**
 * Menu callback; displays the administration page.
 */
function api_page_admin() {
  if ($_POST['op'] == t('Save changes')) {
    $edit = $_POST['edit'];

    foreach ($_POST['edit'] as $branch_name => $branch) {
      if ($branch_name == 'new') {
        if ($branch['branch_name'] != '') {
          db_query("INSERT INTO {api_branch} (branch_name, title, directory) VALUES ('%s', '%s', '%s')", $branch['branch_name'], $branch['title'], $branch['directory']);
        }
      }
      else {
        if ($branch['branch_name'] == '') {
          db_query("DELETE FROM {api_branch} WHERE branch_name = '%s'", $branch_name);
          $result = db_query("SELECT did FROM {api_documentation} WHERE branch_name = '%s'", $branch_name);
          while ($object = db_fetch_object($result)) {
            db_query('DELETE FROM {api_documentation} WHERE did = %d', $object->did);
            db_query('DELETE FROM {api_file} WHERE did = %d', $object->did);
            db_query('DELETE FROM {api_function} WHERE did = %d', $object->did);
            db_query('DELETE FROM {api_reference} WHERE from_did = %d OR to_did = %d', $object->did, $object->did);
          }
        }
        else {
          db_query("UPDATE {api_branch} SET branch_name = '%s', title = '%s', directory = '%s' WHERE branch_name = '%s'", $branch['branch_name'], $branch['title'], $branch['directory'], $branch_name);
          db_query("UPDATE {api_documentation} SET branch_name = '%s' WHERE branch_name = '%s'", $branch['branch_name'], $branch_name);
        }
      }
    }

    drupal_set_message('Changes saved.');
  }

  if ($_POST['op'] == t('Clear index')) {
    db_query("DELETE FROM {api_documentation}");
    db_query("DELETE FROM {api_file}");
    db_query("DELETE FROM {api_function}");
    db_query("DELETE FROM {api_reference}");

    drupal_set_message(t('Index cleared. It will be rebuilt during the next few runs of %cron.', array('%cron' => '<a href="cron.php">cron.php</a>')));
  }

  if ($_POST['op'] == t('Parse manual pages')) {
    variable_set('php_manual', $_POST['edit']['php_manual']);
    api_parse_php_manual($_POST['edit']['php_manual']);
    drupal_set_message(t('Manual pages scanned.'));
  }

  $output = '';
  $form = '';

  $headers = array(t('Short name'), t('Long name'), t('Directory'));
  $rows = array();

  $result = db_query('SELECT branch_name, title, directory FROM {api_branch}');
  while ($branch = db_fetch_object($result)) {
    $rows[] = array(
      form_textfield('', $branch->branch_name. '][branch_name', $branch->branch_name, 10, 63),
      form_textfield('', $branch->branch_name. '][title', $branch->title, 20, 255),
      form_textfield('', $branch->branch_name. '][directory', $branch->directory, 30, 255));
  }
  $branch_name_field = form_textfield('', 'new][branch_name', '', 10, 63);
  $title_field = form_textfield('', 'new][title', '', 20, 255);
  $directory_field = form_textfield('', 'new][directory', '', 30, 255);
  $rows[] = array($branch_name_field, $title_field, $directory_field);

  $form .= theme('table', $headers, $rows);
  $form .= form_submit(t('Save changes'));

  $output .= '<h3>'. t('Branches to index'). '</h3>';
  $output .= form($form);

  $output .= '<h3>'. t('PHP Manual') .'</h3>';
  $form = form_textfield('', 'php_manual', variable_get('php_manual', ''), 40, 255, t('The directory containing the HTML pages of the PHP manual.'));
  $form .= form_submit(t('Parse manual pages'));
  $output .= form($form);

  $output .= '<h3>'. t('Clear index') .'</h3>';
  $output .= '<p>'. t('Remove all indexed code files.') .'</p>';
  $form = form_submit(t('Clear index'));
  $output .= form($form);

  print theme('page', $output);
}

/**
 * Implementation of hook_cron().
 */
function api_cron() {
  $files_scanned = 0;

  $branches = db_query('SELECT branch_name, directory FROM {api_branch}');
  while ($branch = db_fetch_object($branches)) {
    $files = file_scan_directory($branch->directory, 'module|inc|php|theme');

    foreach ($files as $path => $file) {
      $file_name = substr($path, strrpos($path, '/') + 1);

      $modified = 0;
      $result = db_query("SELECT f.modified FROM {api_documentation} d INNER JOIN {api_file} f ON d.did = f.did WHERE d.object_name = '%s' AND d.branch_name = '%s' AND d.object_type = 'file'", $file_name, $branch->branch_name);
      if ($file = db_fetch_object($result)) {
        $modified = $file->modified;
      }

      if (filemtime($path) > $modified) {
        api_parse_file($path, $branch->branch_name, $file_name);

        $files_scanned++;
        if ($files_scanned >= variable_get('api_files_per_cron', 10)) {
          break;
        }
      }
    }
  }

  // Ensure that reference updates persist until the next cron run.
  api_reference('save');
}

/**
 * Parse out function definitions from the PHP manual.
 */
function api_parse_php_manual($directory) {
  $files = file_scan_directory($directory, 'ref.(.*).html');
  
  foreach ($files as $path => $file) {
    $file_name = substr($path, strrpos($path, '/') + 1);
    $source = file_get_contents($path);
    
    $function_matches = array();
    preg_match_all('!<DT\n><A\nHREF="function.([a-zA-Z0-9-]+).html"\n>([a-zA-Z0-9_]+)</A
>&nbsp;--&nbsp;(.*?)</DT\n>!s', $source, $function_matches, PREG_SET_ORDER);
    foreach ($function_matches as $function_match) {
      $docblock = array(
        'object_name' => $function_match[2],
        'branch_name' => 'php',
        'object_type' => 'function',
        'file_name' => $file_name,
        'title' => $function_match[2],
        'summary' => trim(strip_tags($function_match[3])),
        'documentation' => $function_match[3],
        'code' => '');
      api_save_documentation($docblock);
    }
  }
}

/**
 * Read in the file at the given path and parse its documentation.
 */
function api_parse_file($file_path, $branch_name, $file_name) {
  $source = file_get_contents($file_path);

  $docblock_matches = array();
  $docblocks = array();

  // Set up documentation block for file, in case it is not explicitly defined.
  $docblocks[0] = array(
      'object_name' => $file_name,
      'branch_name' => $branch_name,
      'object_type' => 'file',
      'file_name' => $file_name,
      'title' => $file_name,
      'summary' => '',
      'documentation' => '',
      'code' => api_format_php($source));
  $docblocks[0]['version'] = '';
  $version_match = array();
  if (preg_match('!\$'.'Id: .*?,v (.*?) (.*?) (.*?) (.*?) Exp \$!', $source, $version_match)) {
    $docblocks[0]['version'] = $version_match[1] .' (checked in on '. $version_match[2] .' at '. $version_match[3] .' by '. $version_match[4] .')';
  }
  $docblocks[0]['modified'] = filemtime($file_path);

  $nested_groups = array();

  preg_match_all('!/\*\*(.*?)\*/!s', $source, $docblock_matches, PREG_SET_ORDER | PREG_OFFSET_CAPTURE);

  foreach ($docblock_matches as $docblock_match) {
    $docblock = array(
      'object_name' => '',
      'branch_name' => $branch_name,
      'object_type' => '',
      'file_name' => $file_name,
      'title' => '',
      'summary' => '',
      'documentation' => '',
      'code' => '');
    $docblock['content'] = str_replace(array("\n *", "\n "), array("\n", "\n"), $docblock_match[1][0]);
    $docblock['start'] = $docblock_match[0][1];
    $docblock['length'] = strlen($docblock_match[0][0]);

    // Determine what kind of documentation block this is.
    $code_start = $docblock['start'] + $docblock['length'] + 1;
    if (substr($source, $code_start, 8) == 'function') {
      $function_matches = array();

      $docblock['object_type'] = 'function';
      preg_match('!^function (([a-zA-Z0-9_]+)\(.*?) \{!', substr($source, $code_start), $function_matches);
      $docblock['object_name'] = $function_matches[2];
      $docblock['title'] = $function_matches[2];
      $docblock['signature'] = $function_matches[1];

      // We rely on the Drupal coding convention that functions are closed in column 1.
      $code_end = strpos($source, "\n}", $code_start);
      $docblock['code'] = substr($source, $code_start, $code_end - $code_start + 2);
      $docblock['code'] = api_format_php("<?php\n". $docblock['code'] ."\n?>");

      $docblock['start_line'] = substr_count(substr($source, 0, $code_start), "\n");

      // Find parameter definitions.
      $param_match = array();
      $offset = 0;
      $docblock['parameters'] = '';
      while (preg_match('!@param(.*?)(?=\n@|\n\n|$)!s', substr($docblock['content'], $offset), $param_match, PREG_OFFSET_CAPTURE)) {
        $docblock['content'] = str_replace($param_match[0][0], '', $docblock['content']);
        $docblock['parameters'] .= "\n\n". $param_match[1][0];
        $offset = $param_match[0][1];
      }
      $docblock['parameters'] = api_format_documentation($docblock['parameters'], $branch_name);

      // Find return value definitions.
      $return_matches = array();
      $docblock['return'] = '';
      preg_match_all('!@return(.*?)(\n@|\n\n|$)!s', $docblock['content'], $return_matches, PREG_SET_ORDER);
      foreach($return_matches as $return_match) {
        $docblock['content'] = str_replace($return_match[0], '', $docblock['content']);
        $docblock['return'] .= "\n\n". $return_match[1];
      }
      $docblock['return'] = api_format_documentation($docblock['return'], $branch_name);

      // Find referenced functions.
      $function_call_matches = array();
      $docblock['function calls'] = array();
      preg_match_all('!<span class="php-function">([a-zA-Z0-9_]+)</span>\(!', substr($docblock['code'], strlen('<div class="php"><span class="php-keyword">function</span> <span class="php-function">')), $function_call_matches, PREG_SET_ORDER);
      foreach($function_call_matches as $function_call_match) {
        $docblock['function calls'][$function_call_match[1]] = $function_call_match[1];
      }

      // Determine group membership.
      $group_matches = array();
      preg_match_all('!@(ingroup|addtogroup) ([a-zA-Z0-9_]+)!', $docblock['content'], $group_matches);
      $docblock['groups'] = $group_matches[2];
      $docblock['content'] = preg_replace('!@ingroup.*?\n!', '', $docblock['content']);

      foreach ($nested_groups as $group_id) {
        if (!empty($group_id)) {
          $docblock['groups'][] = $group_id;
        }
      }
    }
    else if (strpos($docblock['content'], '@mainpage') !== FALSE) {
      $mainpage_matches = array();
      preg_match('!@mainpage (.*?)\n!', $docblock['content'], $mainpage_matches);
      $docblock['title'] = $mainpage_matches[1];
      $docblock['content'] = preg_replace('!@mainpage.*?\n!', '', $docblock['content']);
      $docblock['object_type'] = 'mainpage';
      $docblock['object_name'] = $branch_name;
    }
    else if (strpos($docblock['content'], '@file') !== FALSE) {
      $docblocks[0]['content'] = str_replace('@file', '', $docblock['content']);
      $docblocks[0]['documentation'] = api_format_documentation($docblocks[0]['content'], $branch_name);
      $docblocks[0]['summary'] = api_documentation_summary($docblocks[0]['documentation']);
    }
    else if (strpos($docblock['content'], '@defgroup') !== FALSE) {
      $group_matches = array();
      preg_match('!@defgroup ([a-zA-Z0-9_]+) +(.*?)\n!', $docblock['content'], $group_matches);
      $docblock['object_name'] = $group_matches[1];
      $docblock['title'] = $group_matches[2];
      $docblock['content'] = preg_replace('!@defgroup.*?\n!', '', $docblock['content']);
      $docblock['object_type'] = 'group';
    }

    // Handle nested function groups.
    if (strpos($docblock['content'], '@{') !== FALSE) {
      if ($docblock['object_type'] == 'group') {
        array_push($nested_groups, $docblock['object_name']);
      }
      else {
        $group_matches = array();
        if (preg_match('!@(ingroup|addtogroup) ([a-zA-Z0-9_]+)!', $docblock['content'], $group_matches)) {
          array_push($nested_groups, $group_matches[2]);
        }
        else {
          array_push($nested_groups, '');
        }
      }
    }
    if (strpos($docblock['content'], '@}') !== FALSE) {
      array_pop($nested_groups);
    }

    if ($docblock['object_type'] != '') {
      $docblock['documentation'] = api_format_documentation($docblock['content'], $branch_name);
      $docblock['summary'] = api_documentation_summary($docblock['documentation']);
      $docblocks[] = $docblock;
    }
  }

  // Find undocumented functions.
  $function_matches = array();
  preg_match_all('!\n\nfunction (([a-zA-Z0-9_]+)\(.*?) \{!s', $source, $function_matches, PREG_SET_ORDER | PREG_OFFSET_CAPTURE);
  foreach ($function_matches as $function_match) {
    $docblock = array(
      'object_name' => $function_match[2][0],
      'branch_name' => $branch_name,
      'object_type' => 'function',
      'file_name' => $file_name,
      'title' => $function_match[2][0],
      'summary' => '',
      'documentation' => '',
      'code' => '');
    $docblock['signature'] = $function_match[1][0];
    $docblock['parameters'] = '';
    $docblock['return'] = '';
    $docblock['groups'] = array();

    $code_start = $function_match[0][1] + 2;
    $code_end = strpos($source, "\n}", $code_start);
    $docblock['code'] = substr($source, $code_start, $code_end - $code_start + 2);
    $docblock['code'] = api_format_php("<?php\n". $docblock['code'] ."\n?>");

    $docblock['start_line'] = substr_count(substr($source, 0, $code_start), "\n");

    $docblocks[] = $docblock;
  }

  $old_dids = array();
  $result = db_query("SELECT did FROM {api_documentation} WHERE branch_name = '%s' AND file_name = '%s'", $branch_name, $file_name);
  while ($object = db_fetch_object($result)) {
    $old_dids[] = $object->did;
  }

  $dids = array();
  foreach ($docblocks as $docblock) {
    $dids[] = api_save_documentation($docblock);
  }
  $old_dids = array_diff($old_dids, $dids);
  if (count($old_dids) > 0) {
    $old_dids = implode(',', $old_dids);
    db_query('DELETE FROM {api_documentation} WHERE did IN (%s)', $old_dids);
    db_query('DELETE FROM {api_file} WHERE did IN (%s)', $old_dids);
    db_query('DELETE FROM {api_function} WHERE did IN (%s)', $old_dids);
    db_query('DELETE FROM {api_reference} WHERE from_did IN (%s) OR to_did IN (%s)', $old_dids, $old_dids);
  }
}

/**
 * Save a documentation block into the database.
 *
 * @param &$docblock
 *   An array containing information about the documentation block.
 * @return
 *   The documentation ID of the inserted/updated construct.
 */
function api_save_documentation(&$docblock) {
  $result = db_query("SELECT did FROM {api_documentation} WHERE object_name = '%s' AND branch_name = '%s' AND object_type = '%s'", $docblock['object_name'], $docblock['branch_name'], $docblock['object_type']);
  if (db_num_rows($result) > 0) {
    $did = db_result($result);
    db_query("UPDATE {api_documentation} SET title = '%s', file_name = '%s', summary = '%s', documentation = '%s', code = '%s' WHERE did = %d", $docblock['title'], $docblock['file_name'], $docblock['summary'], $docblock['documentation'], $docblock['code'], $did);
  }
  else {
    $did = db_next_id('{api_documentation}_did');
    db_query("INSERT INTO {api_documentation} (did, object_name, branch_name, object_type, title, file_name, summary, documentation, code) VALUES (%d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')", $did, $docblock['object_name'], $docblock['branch_name'], $docblock['object_type'], $docblock['title'], $docblock['file_name'], $docblock['summary'], $docblock['documentation'], $docblock['code']);
  }

  switch ($docblock['object_type']) {
    case 'function':
      db_query('DELETE FROM {api_function} WHERE did = %d', $did);
      db_query("INSERT INTO {api_function} (did, signature, start_line, parameters, return) VALUES (%d, '%s', %d, '%s', '%s')", $did, $docblock['signature'], $docblock['start_line'], $docblock['parameters'], $docblock['return']);

      if (is_array($docblock['groups'])) {
        foreach ($docblock['groups'] as $group_name) {
          api_reference('set', $docblock['branch_name'], 'group', $group_name, $did);
        }
      }
      if (is_array($docblock['function calls'])) {
        foreach ($docblock['function calls'] as $function_name) {
          api_reference('set', $docblock['branch_name'], 'function', $function_name, $did);
        }
      }
      break;

    case 'file':
      db_query('DELETE FROM {api_file} WHERE did = %d', $did);
      db_query("INSERT INTO {api_file} (did, modified, version) VALUES (%d, %d, '%s')", $did, $docblock['modified'], $docblock['version']);
      break;
  }

  return $did;
}

/**
 * Turn function names into links.
 */
function api_link_code($code, $branch_name) {
  $code = preg_replace('!(<span class="php-function">)([a-zA-Z0-9_]+)(</span>\()!e', '"$1". api_link_function_name("$2", "'. $branch_name .'") ."$3"', $code);

  return $code;
}

/**
 * Turn function and file names into links.
 */
function api_link_documentation($documentation, $branch_name) {
  $documentation = preg_replace('!([a-zA-Z0-9_]+)(\()!e', 'api_link_function_name("$1", "'. $branch_name .'") ."$2"', $documentation);
  $documentation = preg_replace('%(?<!")[a-zA-Z0-9_]+\.[a-zA-Z0-9_]+(?!")%e', 'api_link_file_name("$0", "'. $branch_name .'")', $documentation);

  return $documentation;
}

/**
 * Link a function name to its documentation.
 */
function api_link_function_name($name, $branch_name) {
  static $local_functions = array();
  static $php_functions = array();

  if (count($local_functions) == 0) {
    $result = db_query("SELECT object_name, summary FROM {api_documentation} WHERE branch_name = '%s' AND object_type = 'function'", $branch_name);
    while ($function = db_fetch_object($result)) {
      $local_functions[$function->object_name] = $function->summary;
    }
  }

  if (count($php_functions) == 0) {
    $result = db_query("SELECT object_name, summary FROM {api_documentation} WHERE branch_name = 'php' AND object_type = 'function'");
    while ($function = db_fetch_object($result)) {
      $php_functions[$function->object_name] = $function->summary;
    }
  }

  if (array_key_exists($name, $local_functions)) {
    return l($name, 'api/'. $branch_name .'/function/'. $name, array('title' => $local_functions[$name], 'class' => 'local'));
  }
  else  if (array_key_exists($name, $php_functions)) {
    return '<a href="http://php.net/manual/en/function.'. str_replace('_', '-', $name) .'.php" title="'. $php_functions[$name] .'" class="php-manual">'. $name .'</a>';
  }
  else {
    return $name;
  }
}

/**
 * Link a file name to its documentation.
 */
function api_link_file_name($name, $branch_name) {
  static $local_files = array();

  if (count($local_files) == 0) {
    $result = db_query("SELECT object_name, summary FROM {api_documentation} WHERE branch_name = '%s' AND object_type = 'file'", $branch_name);
    while ($file = db_fetch_object($result)) {
      $local_files[$file->object_name] = $file->summary;
    }
  }

  if (array_key_exists($name, $local_files)) {
    return l($name, 'api/'. $branch_name .'/file/'. $name, array('title' => $local_files[$name]));
  }
  else {
    return $name;
  }
}

/**
 * Format a documentation block as HTML.
 */
function api_format_documentation($documentation, $branch_name) {
  // Don't do processing on empty text (so we don't end up with empty paragraphs).
  $documentation = trim($documentation);
  if (empty($documentation)) {
    return '';
  }

  $documentation = drupal_specialchars($documentation);

  // Process the @link tag.
  $documentation = preg_replace('!@link ([a-zA-Z0-9_]+\.[a-zA-Z0-9_]+) (.*?) @endlink!', l('$2', 'api/'. $branch_name .'/file/$1'), $documentation);
  $documentation = preg_replace('!@link ([a-zA-Z0-9_]+)\(\) (.*?) @endlink!', l('$2', 'api/'. $branch_name .'/function/$1'), $documentation);
  $documentation = preg_replace('!@link ([a-zA-Z0-9_]+) (.*?) @endlink!', l('$2', 'api/'. $branch_name .'/group/$1'), $documentation);

  // Remove any leftover Doxygen formatting statements.
  $documentation = preg_replace('!@[a-zA-Z0-9_}{]+!', '', $documentation);

  // Convert newlines into paragraphs.
  $documentation = preg_replace('!(.*?)(\n\n|$)!s', "\n<p>\n".'$1'."\n</p>\n", $documentation);

  // Find bulleted lists.
  $documentation = preg_replace('!\n( *)- !e', 'api_format_documentation_bullet(\'$1\')', $documentation);

  return $documentation;
}

/**
 * Replacement pattern for poor-man's bulleted list code.
 */
function api_format_documentation_bullet($whitespace) {
  $output = "\n<br />";
  for ($i = 0; $i < strlen($whitespace); $i++) {
    $output .= '&nbsp;';
  }
  $output .= '&#x2022; ';
  return $output;
}

/**
 * Retrieve a summary from a documentation block.
 */
function api_documentation_summary($documentation) {
  $pos = strpos($documentation, "</p>");
  if ($pos !== FALSE) {
    $documentation = substr($documentation, 0, $pos);
  }
  return substr(trim(strip_tags($documentation)), 0, 255);
}

/**
 * Colorize and format a PHP script.
 */
function api_format_php($code) {
  $output = '';

  if (!defined('T_ML_COMMENT')) {
    define('T_ML_COMMENT', T_COMMENT);
  }
  if (!defined('T_DOC_COMMENT')) {
    define('T_DOC_COMMENT', T_COMMENT);
  }

  $tokens = token_get_all($code);

  $in_string = FALSE;

  foreach($tokens as $token) {
    if ($in_string) {
      if ($token == '"') {
        $output .= '"</span>';
        $in_string = FALSE;
      }
      else {
        $output .= is_array($token) ? htmlentities($token[1]) : htmlentities($token);
      }
      continue;
    }
    else if ($token == '"') {
      $output .= '<span class="php-string">"';
      $in_string = TRUE;
      continue;
    }

    if (is_array($token)) {
      $type = $token[0];
      $value = htmlentities($token[1]);

      switch ($type) {
        // Discarded strings:
        case T_OPEN_TAG:
        case T_CLOSE_TAG:
          break;

        case T_COMMENT:
        case T_ML_COMMENT:
        case T_DOC_COMMENT:
          $output .= '<span class="php-comment">'. $value .'</span>';
          break;

        case T_VARIABLE:
          $output .= '<span class="php-variable">'. $value .'</span>';
          break;

        case T_CONSTANT_ENCAPSED_STRING:
        case T_INLINE_HTML:
          $output .= '<span class="php-string">'. $value .'</span>';
          break;

        case T_STRING:
          $output .= '<span class="php-function">'. $value .'</span>';
          break;

        case T_LNUMBER:
        case T_DNUMBER:
          $output .= '<span class="php-constant">'. $value .'</span>';
          break;

        case T_ARRAY_CAST: case T_ARRAY: case T_AS: case T_BOOL_CAST:
        case T_BREAK: case T_CASE: case T_CLASS: case T_CONST:
        case T_CONTINUE: case T_DECLARE: case T_DEFAULT: case T_DO:
        case T_DOUBLE_CAST: case T_ECHO: case T_ELSE: case T_ELSEIF:
        case T_EMPTY: case T_ENDDECLARE: case T_ENDFOR: case T_ENDFOREACH:
        case T_ENDIF: case T_ENDSWITCH: case T_ENDWHILE: case T_EVAL:
        case T_EXIT: case T_EXTENDS: case T_FOR: case T_FOREACH:
        case T_FUNCTION: case T_GLOBAL: case T_IF: case T_INCLUDE_ONCE:
        case T_INCLUDE: case T_INT_CAST: case T_ISSET: case T_LIST:
        case T_NEW: case T_OBJECT_CAST: case T_OLD_FUNCTION: case T_PRINT:
        case T_REQUIRE_ONCE: case T_REQUIRE: case T_RETURN: case T_STATIC:
        case T_STRING_CAST: case T_SWITCH: case T_UNSET_CAST: case T_UNSET:
        case T_USE: case T_VAR: case T_WHILE:
          $output .= '<span class="php-keyword">'. $value .'</span>';
          break;

        default:
          $output .= $value;
      }
    }
    else {
      $output .= $token;
    }
  }

  // Manage whitespace:
  $output = preg_replace('!([\n ]+)!se', 'api_format_php_whitespace(\'$1\')', $output);
  return '<div class="php">'. $output .'</div>';
}

/**
 * Given a run of whitespace, convert it into nonbreaking spaces and forced line
 * breaks as necessary to preserve it in the resulting HTML.
 */
function api_format_php_whitespace($whitespace) {
  $output = '';
  $breakingspace = 1;
  $runlength = 0;
  for ($i = 0; $i < strlen($whitespace); $i++) {
    if ($whitespace{$i} == "\n") {
      for ($j = 0; $j < $runlength - $breakingspace; $j++) {
        $output .= '&nbsp;';
      }
      if ($breakingspace) {
        $output .= ' ';
      }
      $output .= "<br />\n";
      $breakingspace = 0;
    }
    else {
      $runlength++;
    }
  }
  for ($j = 0; $j < $runlength - $breakingspace; $j++) {
    $output .= '&nbsp;';
  }
  if ($breakingspace) {
    $output .= ' ';
  }

  return $output;
}

/**
 * Since we may parse a file containing a reference before we have parsed the
 * file containing the referenced object, we manage all references internally
 * in an array and store the array in a Drupal persistent variable. Then we can
 * save the references to the database table when the referenced object has
 * been parsed.
 */
function api_reference($op, $branch_name = '', $to_type = '', $to_name = '', $from_did = 0) {
  static $reference = NULL;

  if ($reference == NULL) {
    $reference = variable_get('api_reference', array());
  }

  switch ($op) {
    case 'save':
      foreach (array_keys($reference) as $key) {
        list($branch_name, $to_type, $to_name) = unserialize($key);
        if ($to_did = db_result(db_query("SELECT did FROM {api_documentation} WHERE object_name = '%s' AND branch_name = '%s' AND object_type = '%s'", $to_name, $branch_name, $to_type))) {
          foreach ($reference[$key] as $from_did) {
            db_query('REPLACE INTO {api_reference} (from_did, to_did) VALUES (%d, %d)', $from_did, $to_did);
          }
          unset($reference[$key]);
        }
        else if (db_result(db_query("SELECT COUNT(*) FROM {api_documentation} WHERE object_name = '%s' AND branch_name = 'php' AND object_type = '%s'", $to_name, $to_type))) {
          unset($reference[$key]);
        }
      }

      variable_set('api_reference', $reference);
      break;
    case 'set':
      $key = serialize(array($branch_name, $to_type, $to_name));
      $reference[$key][] = $from_did;
      break;
  }
}

/**
 * Implementation of hook_search().
 */
function api_search($keys) {
  $count = db_result(db_query("SELECT COUNT(*) FROM {api_documentation} d WHERE d.title LIKE '%%%s%%' OR d.documentation LIKE '%%%s%%'", $keys, $keys));
  $result = db_query_range("SELECT d.title, d.object_name, d.branch_name, b.title AS branch_title, d.object_type, d.summary FROM {api_documentation} d INNER JOIN {api_branch} b ON d.branch_name = b.branch_name WHERE d.title LIKE '%%%s%%' OR d.documentation LIKE '%%%s%%' ORDER BY (d.title LIKE '%%%s%%') DESC, d.branch_name, d.title", $keys, $keys, $keys, 0, 10);

  $matches = array();
  while ($object = db_fetch_object($result)) {
    $match = array();
    $match['title'] = $object->title;
    $match['branch'] = $object->branch_title;
    $match['summary'] = $object->summary;
    switch ($object->object_type) {
      case 'function':
        $match['link'] = url('api/'. $object->branch_name .'/function/'. $object->object_name);
        $match['type'] = t('function');
        break;
      case 'file':
        $match['link'] = url('api/'. $object->branch_name .'/file/'. $object->object_name);
        $match['type'] = t('file');
        break;
      case 'group':
        $match['link'] = url('api/'. $object->branch_name .'/group/'. $object->object_name);
        $match['type'] = t('topic');
        break;
      case 'mainpage':
        $match['link'] = url('api/'. $object->branch_name .'/branch/'. $object->object_name);
        $match['type'] = t('branch');
        break;
    }
    $matches[] = $match;
  }

  if ($count > 10) {
    return array(t('Matching API documentation (10 of %count)', array('%count' => $count)), $matches);
  }
  else if ($count > 0) {
    return array(t('Matching API documentation'), $matches);
  }
}

/**
 * Implementation of hook_search_item().
 */
function api_search_item($item) {
  $output = '<dt class="title"><a href="'. $item['link'] .'">'. $item['title'] .'</a></dt>';
  $output .= '<dd class="small">'. $item['type'] .' ('. $item['branch'] .')';
  if (!empty($item['summary'])) {
    $output .= ': '. $item['summary'];
  }
  $output .= '</dd>';

  return $output;
}

?>
