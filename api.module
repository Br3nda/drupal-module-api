<?php
// $Id: api.module,v 1.12 2006/01/31 02:33:32 JonBob Exp $

/**
 * @file
 * Generates and displays API documentation pages.
 *
 * This is an implementation of a subset of the Doxygen documentation generator
 * specification, tuned to produce output that best benefits the Drupal code base.
 * It is designed to assume the code it documents follows Drupal coding conventions,
 * and supports the following Doxygen constructs:
 *   @ mainpage
 *   @ file
 *   @ defgroup
 *   @ ingroup
 *   @ addtogroup (as a synonym of @ ingroup)
 *   @ param
 *   @ return
 *   @ link
 */

/**
 * Implementation of hook_help().
 */
function api_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Generates and displays API documentation pages.');
  }
}

/**
 * Implementation of hook_menu().
 */
function api_menu($may_cache) {
  $items = array();
  $access = user_access('access content');

  if ($may_cache) {
    $items[] = array('path' => 'api', 'title' => t('API reference'),
      'access' => user_access('access content'),
      'callback' => 'api_page_main');
    
    $result = db_query('SELECT branch_name, title FROM {api_branch}');
    while ($branch = db_fetch_object($result)) {
      $items[] = array('path' => 'api/'. $branch->branch_name, 'title' => $branch->title,
        'callback' => 'api_page_branch', 'access' => $access,
        'callback arguments' => array($branch->branch_name));
      $items[] = array('path' => 'api/'. $branch->branch_name .'/function_dump', 'title' => t('functions'),
        'callback' => 'api_page_function_dump', 'access' => $access,
        'callback arguments' => array($branch->branch_name),
        'type' => MENU_CALLBACK);
      $items[] = array('path' => 'api/'. $branch->branch_name .'/function', 'title' => t('functions'),
        'callback' => 'api_page_listing', 'access' => $access,
        'callback arguments' => array($branch->branch_name, 'function'));
      $items[] = array('path' => 'api/'. $branch->branch_name .'/constant', 'title' => t('constants'),
        'callback' => 'api_page_listing', 'access' => $access,
        'callback arguments' => array($branch->branch_name, 'constant'));
      $items[] = array('path' => 'api/'. $branch->branch_name .'/file', 'title' => t('files'),
        'callback' => 'api_page_listing', 'access' => $access,
        'callback arguments' => array($branch->branch_name, 'file'));
      $items[] = array('path' => 'api/'. $branch->branch_name .'/group', 'title' => t('topics'),
        'callback' => 'api_page_listing', 'access' => $access,
        'callback arguments' => array($branch->branch_name, 'group'));
    }

    $items[] = array('path' => 'admin/api', 'title' => t('API reference'),
      'access' => user_access('administer API reference'),
      'callback' => 'api_page_admin');
  }
  else {
    if (arg(0) == 'api') {
      if (is_string(arg(3))) {
        $items[] = array('path' => 'api/'. arg(1) .'/function/'. arg(3), 'title' => t('function'),
          'callback' => 'api_page_function', 'access' => $access,
          'callback arguments' => array(arg(1), arg(3)),
          'type' => MENU_CALLBACK);
        $items[] = array('path' => 'api/'. arg(1) .'/function/'. arg(3) .'/documentation', 'title' => t('view documentation'),
          'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
        $items[] = array('path' => 'api/'. arg(1) .'/function/'. arg(3) .'/references', 'title' => t('list references'),
          'callback' => 'api_page_function_references', 'access' => $access,
          'callback arguments' => array(arg(1), arg(3)),
          'type' => MENU_LOCAL_TASK);
      }

      if (is_string(arg(3))) {
        $items[] = array('path' => 'api/'. arg(1) .'/constant/'. arg(3), 'title' => t('constant'),
          'callback' => 'api_page_constant', 'access' => $access,
          'callback arguments' => array(arg(1), arg(3)),
          'type' => MENU_CALLBACK);
      }

      if (strpos($_GET['q'], 'api/'. arg(1) .'/file/') !== FALSE) {
        $matches = array();
        preg_match('!(api/'. arg(1) .'/file/)(.*?)(/source|/file|$)!', $_GET['q'], $matches);
        $main_url = $matches[1] . $matches[2];
        $file_name = $matches[2];
        
        $items[] = array('path' => $main_url, 'title' => t('file'),
          'callback' => 'api_page_file', 'access' => $access,
          'callback arguments' => array(arg(1), $file_name),
          'type' => MENU_CALLBACK);
        $items[] = array('path' => $main_url .'/documentation', 'title' => t('view documentation'),
          'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
        $items[] = array('path' => $main_url .'/source', 'title' => t('view source'),
          'callback' => 'api_page_file_source', 'access' => $access,
          'callback arguments' => array(arg(1), $file_name),
          'type' => MENU_LOCAL_TASK);
      }

      if (is_string(arg(3))) {
        $items[] = array('path' => 'api/'. arg(1) .'/group/'. arg(3), 'title' => t('topic'),
          'callback' => 'api_page_group', 'access' => $access,
          'callback arguments' => array(arg(1), arg(3)),
          'type' => MENU_CALLBACK);
      }
    }
  }

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function api_perm() {
  return array('administer API reference');
}

/**
 * Menu callback; displays a branch listing.
 */
function api_page_main() {
  return '';
}

/**
 * Menu callback; displays the main documentation page.
 */
function api_page_branch($branch_name) {
  $result = db_query("SELECT documentation FROM {api_documentation} WHERE object_name = '%s' AND branch_name = '%s' AND object_type = 'mainpage'", $branch_name, $branch_name);
  if ($branch = db_fetch_object($result)) {
    return api_link_documentation($branch->documentation, $branch_name);
  }
  else {
    drupal_not_found();
  }
}

/**
 * Menu callback; displays an object listing.
 */
function api_page_listing($branch_name, $object_type) {
  $headers = array();
  $headers[] = array('data' => t('Name'), 'field' => 'title');
  $headers[] = array('data' => t('Location'), 'field' => 'file_name');
  $headers[] = t('Description');

  $rows = array();
  $result = pager_query("SELECT object_name, title, summary, file_name FROM {api_documentation} WHERE branch_name = '%s' AND object_type = '%s'". tablesort_sql($headers), 50, 0, NULL, $branch_name, $object_type);
  while ($object = db_fetch_object($result)) {
    $row = array();
    $row[] = l($object->title, 'api/'. $branch_name .'/'. $object_type .'/'. $object->object_name);
    $row[] = l(str_replace('/', '/ ', $object->file_name), 'api/'. $branch_name .'/file/'. $object->file_name);
    $row[] = api_link_documentation($object->summary, $branch_name);
    $rows[] = $row;
  }

  $output = theme('table', $headers, $rows);
  $output .= theme('pager', NULL, 50, 0, tablesort_pager());

  return $output;
}

/**
 * Menu callback; produces a textual listing of all functions for use in IDEs.
 */
function api_page_function_dump($branch_name) {
  $result = db_query("SELECT d.title, d.summary, f.signature FROM {api_documentation} d INNER JOIN {api_function} f ON d.did = f.did WHERE d.branch_name = '%s' AND d.object_type = 'function'", $branch_name);
  while ($object = db_fetch_object($result)) {
    print($object->signature);
    print(' ### '. $object->summary ."\n");
  }
}

/**
 * Menu callback; displays documentation for a function.
 */
function api_page_function($branch_name, $object_name) {
  drupal_set_html_head('<style type="text/css">@import url(modules/api/api.css);</style>');

  $result = db_query("SELECT d.did, d.title, d.file_name, d.documentation, d.code, f.signature, f.start_line, f.parameters, f.return FROM {api_documentation} d INNER JOIN {api_function} f ON d.did = f.did WHERE d.object_name = '%s' AND d.branch_name = '%s' AND d.object_type = 'function'", $object_name, $branch_name);
  if ($function = db_fetch_object($result)) {
    $output = '';

    $output .= '<h3>'. t('Definition') .'</h3>';
    $output .= '<p><small>'. $function->signature .'</small><br />';
    $output .= l($function->file_name, 'api/'. $branch_name .'/file/'. $function->file_name) .', '. t('line') .' '. $function->start_line .'</p>';

    if (!empty($function->documentation)) {
      $output .= '<h3>'. t('Description') .'</h3>';
      $output .= api_link_documentation($function->documentation, $branch_name);
    }

    if (!empty($function->parameters)) {
      $output .= '<h3>'. t('Parameters') .'</h3>';
      $output .= api_link_documentation($function->parameters, $branch_name);
    }

    if (!empty($function->return)) {
      $output .= '<h3>'. t('Return value') .'</h3>';
      $output .= api_link_documentation($function->return, $branch_name);
    }

    $headers = array(array('data' => t('Name'), 'field' => 'd.title'), t('Description'));
    $rows = array();
    $result = db_query("SELECT d.object_name, d.title, d.summary FROM {api_reference} r INNER JOIN {api_documentation} d ON r.to_did = d.did AND d.object_type = 'group' WHERE r.from_did = %d". tablesort_sql($headers), $function->did);
    while ($group = db_fetch_object($result)) {
      $rows[] = array(
        l($group->title, 'api/'. $branch_name .'/group/'. $group->object_name),
        api_link_documentation($group->summary, $branch_name));
    }
    if (count($rows) > 0) {
      $output .= '<h3>'. t('Related topics') .'</h3>';
      $output .= theme('table', $headers, $rows);
    }

    if (!empty($function->code)) {
      $output .= '<h3>'. t('Code') .'</h3>';
      $output .= api_link_code($function->code, $branch_name);
    }

    drupal_set_title($function->title);
    return $output;
  }
  else {
    drupal_not_found();
  }
}

/**
 * Menu callback; displays all functions that reference another function.
 */
function api_page_function_references($branch_name, $object_name) {
  drupal_set_html_head('<style type="text/css">@import url(modules/api/api.css);</style>');

  $result = db_query("SELECT d.did, d.title FROM {api_documentation} d WHERE d.object_name = '%s' AND d.branch_name = '%s' AND d.object_type = 'function'", $object_name, $branch_name);
  if ($function = db_fetch_object($result)) {
    $output = '';

    $headers = array(array('data' => t('Name'), 'field' => 'd.title'), t('Description'));
    $rows = array();
    $result = db_query("SELECT d.object_name, d.title, d.summary FROM {api_reference} r INNER JOIN {api_documentation} d ON r.to_did = d.did AND d.object_type = 'group' WHERE r.from_did = %d". tablesort_sql($headers), $function->did);
    while ($group = db_fetch_object($result)) {
      $rows[] = array(
        l($group->title, 'api/'. $branch_name .'/group/'. $group->object_name),
        api_link_documentation($group->summary, $branch_name));
    }
    if (count($rows) > 0) {
      $output .= '<h3>'. t('Related topics') .'</h3>';
      $output .= theme('table', $headers, $rows);
    }

    $headers = array(array('data' => t('Name'), 'field' => 'd.title'), array('data' => t('Location'), 'field' => 'd.file_name'), t('Description'));
    $rows = array();
    $result = db_query("SELECT d.object_name, d.title, d.summary, d.file_name FROM {api_reference} r INNER JOIN {api_documentation} d ON r.from_did = d.did AND d.object_type = 'function' WHERE r.to_did = %d". tablesort_sql($headers), $function->did);
    while ($reference = db_fetch_object($result)) {
      $rows[] = array(
        l($reference->title, 'api/'. $branch_name .'/function/'. $reference->object_name),
        l($reference->file_name, 'api/'. $branch_name .'/file/'. $reference->file_name),
        api_link_documentation($reference->summary, $branch_name));
    }
    if (count($rows) > 0) {
      $output .= '<h3>'. t('Functions that call %name()', array('%name' => $function->title)) .'</h3>';
      $output .= theme('table', $headers, $rows);
    }

    $headers = array(array('data' => t('Name'), 'field' => 'd.title'), array('data' => t('Location'), 'field' => 'd.file_name'), t('Description'));
    $rows = array();
    $result = db_query("SELECT d.object_name, d.title, d.summary, d.file_name FROM {api_reference} r INNER JOIN {api_documentation} d ON r.to_did = d.did AND d.object_type = 'function' WHERE r.from_did = %d". tablesort_sql($headers), $function->did);
    while ($reference = db_fetch_object($result)) {
      $rows[] = array(
        l($reference->title, 'api/'. $branch_name .'/function/'. $reference->object_name),
        l($reference->file_name, 'api/'. $branch_name .'/file/'. $reference->file_name),
        api_link_documentation($reference->summary, $branch_name));
    }
    if (count($rows) > 0) {
      $output .= '<h3>'. t('Functions called by %name()', array('%name' => $function->title)) .'</h3>';
      $output .= theme('table', $headers, $rows);
    }

    drupal_set_title($function->title);
    return $output;
  }
  else {
    drupal_not_found();
  }
}

/**
 * Menu callback; displays documentation for a constant.
 */
function api_page_constant($branch_name, $object_name) {
  drupal_set_html_head('<style type="text/css">@import url(modules/api/api.css);</style>');

  $result = db_query("SELECT d.did, d.title, d.file_name, d.documentation, d.code FROM {api_documentation} d WHERE d.object_name = '%s' AND d.branch_name = '%s' AND d.object_type = 'constant'", $object_name, $branch_name);
  if ($constant = db_fetch_object($result)) {
    $output = '';

    $output .= '<h3>'. t('Definition') .'</h3>';
    $output .= '<p>'. l($constant->file_name, 'api/'. $branch_name .'/file/'. $constant->file_name) .'</p>';

    if (!empty($constant->documentation)) {
      $output .= '<h3>'. t('Description') .'</h3>';
      $output .= api_link_documentation($constant->documentation, $branch_name);
    }

    $headers = array(array('data' => t('Name'), 'field' => 'd.title'), t('Description'));
    $rows = array();
    $result = db_query("SELECT d.object_name, d.title, d.summary FROM {api_reference} r INNER JOIN {api_documentation} d ON r.to_did = d.did AND d.object_type = 'group' WHERE r.from_did = %d". tablesort_sql($headers), $constant->did);
    while ($group = db_fetch_object($result)) {
      $rows[] = array(
        l($group->title, 'api/'. $branch_name .'/group/'. $group->object_name),
        api_link_documentation($group->summary, $branch_name));
    }
    if (count($rows) > 0) {
      $output .= '<h3>'. t('Related topics') .'</h3>';
      $output .= theme('table', $headers, $rows);
    }

    if (!empty($constant->code)) {
      $output .= '<h3>'. t('Code') .'</h3>';
      $output .= api_link_code($constant->code, $branch_name);
    }

    drupal_set_title($constant->title);
    return $output;
  }
  else {
    drupal_not_found();
  }
}

/**
 * Menu callback; displays documentation for a file.
 */
function api_page_file($branch_name, $object_name) {
  drupal_set_html_head('<style type="text/css">@import url(modules/api/api.css);</style>');

  $result = db_query("SELECT d.did, d.title, d.documentation, f.version FROM {api_documentation} d INNER JOIN {api_file} f ON d.did = f.did WHERE object_name = '%s' AND branch_name = '%s' AND object_type = 'file'", $object_name, $branch_name);
  if ($file = db_fetch_object($result)) {
    $output = '';

    if (!empty($file->version)) {
      $output .= '<h3>'. t('Version') .'</h3>';
      $output .= '<p>'. $file->version .'</p>';
    }

    if (!empty($file->documentation)) {
      $output .= '<h3>'. t('Description') .'</h3>';
      $output .= api_link_documentation($file->documentation, $branch_name);
    }

    $headers = array(array('data' => t('Name'), 'field' => 'title'), t('Description'));
    $rows = array();
    $result = db_query("SELECT title, object_name, summary FROM {api_documentation} WHERE file_name = '%s' AND branch_name = '%s' AND object_type = 'constant'". tablesort_sql($headers), $object_name, $branch_name);
    while ($object = db_fetch_object($result)) {
      $rows[] = array(
        l($object->title, 'api/'. $branch_name .'/constant/'. $object->object_name),
        api_link_documentation($object->summary, $branch_name));
    }
    if (count($rows) > 0) {
      $output .= '<h3>'. t('Constants') .'</h3>';
      $output .= theme('table', $headers, $rows);
    }

    $headers = array(array('data' => t('Name'), 'field' => 'title'), t('Description'));
    $rows = array();
    $result = db_query("SELECT title, object_name, summary FROM {api_documentation} WHERE file_name = '%s' AND branch_name = '%s' AND object_type = 'function'". tablesort_sql($headers), $object_name, $branch_name);
    while ($object = db_fetch_object($result)) {
      $rows[] = array(
        l($object->title, 'api/'. $branch_name .'/function/'. $object->object_name),
        api_link_documentation($object->summary, $branch_name));
    }
    if (count($rows) > 0) {
      $output .= '<h3>'. t('Functions') .'</h3>';
      $output .= theme('table', $headers, $rows);
    }

    drupal_set_title($file->title);
    return $output;
  }
  else {
    drupal_not_found();
  }
}

/**
 * Menu callback; displays source code for a file.
 */
function api_page_file_source($branch_name, $object_name) {
  drupal_set_html_head('<style type="text/css">@import url(modules/api/api.css);</style>');

  $result = db_query("SELECT title, code FROM {api_documentation} WHERE object_name = '%s' AND branch_name = '%s' AND object_type = 'file'", $object_name, $branch_name);
  if ($file = db_fetch_object($result)) {
    drupal_set_title($file->title);
    return api_link_code($file->code, $branch_name);
  }
  else {
    drupal_not_found();
  }
}

/**
 * Menu callback; displays documentation for a group.
 */
function api_page_group($branch_name, $object_name) {
  drupal_set_html_head('<style type="text/css">@import url(modules/api/api.css);</style>');

  $result = db_query("SELECT did, title, documentation FROM {api_documentation} WHERE object_name = '%s' AND branch_name = '%s' AND object_type = 'group'", $object_name, $branch_name);
  if ($group = db_fetch_object($result)) {
    $output = '';

    if (!empty($group->documentation)) {
      $output .= api_link_documentation($group->documentation, $branch_name);
    }

    $headers = array(array('data' => t('Name'), 'field' => 'd.title'), array('data' => t('Location'), 'field' => 'd.file_name'), t('Description'));
    $rows = array();
    $result = db_query("SELECT d.object_name, d.title, d.summary, d.file_name FROM {api_reference} r INNER JOIN {api_documentation} d ON r.from_did = d.did AND d.object_type = 'constant' WHERE r.to_did = %d". tablesort_sql($headers), $group->did);
    while ($object = db_fetch_object($result)) {
      $rows[] = array(
        l($object->title, 'api/'. $branch_name .'/constant/'. $object->object_name),
        l($object->file_name, 'api/'. $branch_name .'/file/'. $object->file_name),
        api_link_documentation($object->summary, $branch_name));
    }
    if (count($rows) > 0) {
      $output .= '<h3>'. t('Constants') .'</h3>';
      $output .= theme('table', $headers, $rows);
    }

    $headers = array(array('data' => t('Name'), 'field' => 'd.title'), array('data' => t('Location'), 'field' => 'd.file_name'), t('Description'));
    $rows = array();
    $result = db_query("SELECT d.object_name, d.title, d.summary, d.file_name FROM {api_reference} r INNER JOIN {api_documentation} d ON r.from_did = d.did AND d.object_type = 'function' WHERE r.to_did = %d". tablesort_sql($headers), $group->did);
    while ($object = db_fetch_object($result)) {
      $rows[] = array(
        l($object->title, 'api/'. $branch_name .'/function/'. $object->object_name),
        l($object->file_name, 'api/'. $branch_name .'/file/'. $object->file_name),
        api_link_documentation($object->summary, $branch_name));
    }
    if (count($rows) > 0) {
      $output .= '<h3>'. t('Functions') .'</h3>';
      $output .= theme('table', $headers, $rows);
    }

    drupal_set_title($group->title);
    return $output;
  }
  else {
    drupal_not_found();
  }
}

/**
 * Menu callback; displays the administration page.
 */
function api_page_admin() {
  $output = '';
  $form = array();

  $result = db_query('SELECT branch_name, title, directory FROM {api_branch}');
  while ($branch = db_fetch_object($result)) {
    $form[$branch->branch_name] = array('#tree' => TRUE);
    $form[$branch->branch_name]['branch_name'] = array(
      '#title' => t('Short name'),
      '#type' => 'textfield',
      '#default_value' => $branch->branch_name,
    );
    $form[$branch->branch_name]['title'] = array(
      '#title' => t('Long name'),
      '#type' => 'textfield',
      '#default_value' => $branch->title,
    );
    $form[$branch->branch_name]['directory'] = array(
      '#title' => t('Directory name'),
      '#type' => 'textfield',
      '#default_value' => $branch->directory,
    );
  }
  
  $form['new'] = array('#tree' => TRUE);
  $form['new']['branch_name'] = array(
    '#title' => t('Short name'),
    '#type' => 'textfield',
  );
  $form['new']['title'] = array(
    '#title' => t('Long name'),
    '#type' => 'textfield',
  );
  $form['new']['directory'] = array(
    '#title' => t('Directory name'),
    '#type' => 'textfield',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save changes'),
  );

  $output .= '<h3>'. t('Branches to index'). '</h3>';
  $output .= drupal_get_form('api_page_admin', $form);

  $output .= '<h3>'. t('PHP Manual') .'</h3>';
  $form = array();
  $form['api_php_funcsummary'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('api_php_funcsummary', 'http://cvs.php.net/viewcvs.cgi/*checkout*/phpdoc/funcsummary.txt'),
    '#description' => t('The URL of the PHP function summary document.'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Index PHP manual pages'),
  );
  $output .= drupal_get_form('api_php_manual_index', $form);

  $output .= '<h3>'. t('Refresh index') .'</h3>';
  $output .= '<p>'. t('Parse all indexed code files again, even if they have not been modified.') .'</p>';
  $form = array();
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Reindex'),
  );
  $output .= drupal_get_form('api_reindex', $form);

  return $output;
}

function api_page_admin_submit($form_id, $form_values) {
  foreach ($form_values as $branch_name => $branch) {
    if ($branch_name == 'submit') {
      next;
    }
    if ($branch_name == 'new') {
      if ($branch['branch_name'] != '') {
        db_query("INSERT INTO {api_branch} (branch_name, title, directory) VALUES ('%s', '%s', '%s')", $branch['branch_name'], $branch['title'], $branch['directory']);
      }
    }
    else {
      if ($branch['branch_name'] == '') {
        db_query("DELETE FROM {api_branch} WHERE branch_name = '%s'", $branch_name);
        $result = db_query("SELECT did FROM {api_documentation} WHERE branch_name = '%s'", $branch_name);
        while ($object = db_fetch_object($result)) {
          db_query('DELETE FROM {api_documentation} WHERE did = %d', $object->did);
          db_query('DELETE FROM {api_file} WHERE did = %d', $object->did);
          db_query('DELETE FROM {api_function} WHERE did = %d', $object->did);
          db_query('DELETE FROM {api_reference} WHERE from_did = %d OR to_did = %d', $object->did, $object->did);
        }
      }
      else {
        db_query("UPDATE {api_branch} SET branch_name = '%s', title = '%s', directory = '%s' WHERE branch_name = '%s'", $branch['branch_name'], $branch['title'], $branch['directory'], $branch_name);
        db_query("UPDATE {api_documentation} SET branch_name = '%s' WHERE branch_name = '%s'", $branch['branch_name'], $branch_name);
      }
    }
  }

  drupal_set_message(t('Changes saved.'));
}

function api_php_manual_index_submit($form_id, $form_values) {
  include_once(drupal_get_path('module', 'api') .'/parser.inc');
  variable_set('api_php_funcsummary', $form_values['api_php_funcsummary']);
  db_query("DELETE FROM {api_documentation} WHERE branch_name = 'php'");
  api_parse_php_manual($form_values['api_php_funcsummary']);
  drupal_set_message(t('Manual pages scanned.'));
}

function api_reindex_submit($form_id, $form_values) {
  db_query("UPDATE {api_file} SET modified = 52");
  drupal_set_message(t('All files have been tagged for reindexing. The index will be rebuilt during the next few runs of %cron.', array('%cron' => '<a href="cron.php">cron.php</a>')));
}

/**
 * Implementation of hook_cron().
 */
function api_cron() {
  include_once(drupal_get_path('module', 'api') .'/parser.inc');

  $files_scanned = 0;

  $branches = db_query('SELECT branch_name, directory FROM {api_branch}');
  while ($branch = db_fetch_object($branches)) {
    $files = file_scan_directory($branch->directory, '.*');

    foreach ($files as $path => $file) {
      if ($files_scanned >= variable_get('api_files_per_cron', 10)) {
        break;
      }

      $file_name = substr($path, strlen($branch->directory) + 1);

      if ($file_name{0} == '.') {
        continue;
      }

      $modified = 0;
      $result = db_query("SELECT f.modified FROM {api_documentation} d INNER JOIN {api_file} f ON d.did = f.did WHERE d.object_name = '%s' AND d.branch_name = '%s' AND d.object_type = 'file'", $file_name, $branch->branch_name);
      if ($file = db_fetch_object($result)) {
        $modified = $file->modified;
      }

      if (filemtime($path) > $modified) {
        if (api_parse_file($path, $branch->branch_name, $file_name)) {
          $files_scanned++;
        }
      }
    }
  }

  // Ensure that reference updates persist until the next cron run.
  api_reference('save');
}

/**
 * Turn function names into links.
 */
function api_link_code($code, $branch_name) {
  $code = preg_replace('!(<span class="php-function-or-constant">)([a-zA-Z0-9_]+)(</span>)!e', '"$1". api_link_name("$2", "'. $branch_name .'") ."$3"', $code);

  return $code;
}

/**
 * Turn function and file names into links.
 */
function api_link_documentation($documentation, $branch_name) {
  $documentation = preg_replace('!([a-zA-Z0-9_]+)(\()!e', 'api_link_name("$1", "'. $branch_name .'") ."$2"', $documentation);
  $documentation = preg_replace('%(?<!")[a-zA-Z0-9_]+\.[a-zA-Z0-9_]+(?!")%e', 'api_link_name("$0", "'. $branch_name .'")', $documentation);

  return $documentation;
}

/**
 * Link an object name to its documentation.
 */
function api_link_name($name, $branch_name) {
  static $local_objects = array();
  static $php_functions = array();

  if (count($local_objects) == 0) {
    $result = db_query("SELECT object_name, title, object_type, summary FROM {api_documentation} WHERE branch_name = '%s'", $branch_name);
    while ($object = db_fetch_object($result)) {
      $local_objects[$object->object_type][$object->title] = $object;
    }
  }

  if (count($php_functions) == 0) {
    $result = db_query("SELECT object_name, summary FROM {api_documentation} WHERE branch_name = 'php' AND object_type = 'function'");
    while ($function = db_fetch_object($result)) {
      $php_functions[$function->object_name] = $function->summary;
    }
  }

  if (array_key_exists($name, $local_objects['function'])) {
    return l($name, 'api/'. $branch_name .'/function/'. $local_objects['function'][$name]->object_name, array('title' => $local_objects['function'][$name]->summary, 'class' => 'local'));
  }
  else if (array_key_exists($name, $local_objects['file'])) {
    return l($name, 'api/'. $branch_name .'/file/'. $local_objects['file'][$name]->object_name, array('title' => $local_objects['file'][$name]->summary, 'class' => 'local'));
  }
  else if (array_key_exists($name, $local_objects['constant'])) {
    return l($name, 'api/'. $branch_name .'/constant/'. $local_objects['constant'][$name]->object_name, array('title' => $local_objects['constant'][$name]->summary, 'class' => 'local'));
  }
  else if (array_key_exists($name, $php_functions)) {
    return '<a href="http://php.net/'. $name .'" title="'. $php_functions[$name] .'" class="php-manual">'. $name .'</a>';
  }
  else {
    return $name;
  }
}

/**
 * Implementation of hook_search().
 */
function api_search($keys) {
  $count = db_result(db_query("SELECT COUNT(*) FROM {api_documentation} d WHERE d.title LIKE '%%%s%%' OR d.documentation LIKE '%%%s%%'", $keys, $keys));
  $result = db_query_range("SELECT d.title, d.object_name, d.branch_name, b.title AS branch_title, d.object_type, d.summary FROM {api_documentation} d INNER JOIN {api_branch} b ON d.branch_name = b.branch_name WHERE d.title LIKE '%%%s%%' OR d.documentation LIKE '%%%s%%' ORDER BY (d.title LIKE '%%%s%%') DESC, d.branch_name, d.title", $keys, $keys, $keys, 0, 10);

  $matches = array();
  while ($object = db_fetch_object($result)) {
    $match = array();
    $match['title'] = $object->title;
    $match['branch'] = $object->branch_title;
    $match['summary'] = $object->summary;
    switch ($object->object_type) {
      case 'function':
        $match['link'] = url('api/'. $object->branch_name .'/function/'. $object->object_name);
        $match['type'] = t('function');
        break;
      case 'file':
        $match['link'] = url('api/'. $object->branch_name .'/file/'. $object->object_name);
        $match['type'] = t('file');
        break;
      case 'group':
        $match['link'] = url('api/'. $object->branch_name .'/group/'. $object->object_name);
        $match['type'] = t('topic');
        break;
      case 'mainpage':
        $match['link'] = url('api/'. $object->branch_name .'/branch/'. $object->object_name);
        $match['type'] = t('branch');
        break;
    }
    $matches[] = $match;
  }

  if ($count > 10) {
    return array(t('Matching API documentation (10 of %count)', array('%count' => $count)), $matches);
  }
  else if ($count > 0) {
    return array(t('Matching API documentation'), $matches);
  }
}

/**
 * Implementation of hook_search_item().
 */
function api_search_item($item) {
  $output = '<dt class="title"><a href="'. $item['link'] .'">'. $item['title'] .'</a></dt>';
  $output .= '<dd class="small">'. $item['type'] .' ('. $item['branch'] .')';
  if (!empty($item['summary'])) {
    $output .= ': '. $item['summary'];
  }
  $output .= '</dd>';

  return $output;
}

?>
